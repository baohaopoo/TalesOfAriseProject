#pragma once
#include "Client_Defines.h"
#include "Player.h"

BEGIN(Client)

class CShionne final : public CPlayer
{


	enum SIO_ANIM_STATE
	{
		SIO_ANIM_BTL_ADVENT,
		SIO_ANIM_BTL_ARISE_B,
		SIO_ANIM_BTL_ARISE_F,
		SIO_ANIM_BTL_ATTACK_BLASTER,
		SIO_ANIM_BTL_ATTACK_BRAVE,
		SIO_ANIM_BTL_ATTACK_BURNING_BOMB,
		SIO_ANIM_BTL_ATTACK_BURNING_FORCE,
		SIO_ANIM_BTL_ATTACK_CRESCENT_BULLET,
		SIO_ANIM_BTL_ATTACK_DIVIDE_STAR,
		SIO_ANIM_BTL_ATTACK_FLARE_BURST,
		SIO_ANIM_BTL_ATTACK_FLASH,
		SIO_ANIM_BTL_ATTACK_FLASH_AIR,
		SIO_ANIM_BTL_ATTACK_GRAVITY_FORCE,
		SIO_ANIM_BTL_ATTACK_ICE_BLOCK,
		SIO_ANIM_BTL_ATTACK_ICE_BREAK,
		SIO_ANIM_BTL_ATTACK_MIDORINOSETSUNA,
		SIO_ANIM_BTL_ATTACK_MOON_BULLET,
		SIO_ANIM_BTL_ATTACK_NORMAL_0,
		SIO_ANIM_BTL_ATTACK_NORMAL_1,
		SIO_ANIM_BTL_ATTACK_NORMAL_2,
		SIO_ANIM_BTL_ATTACK_NORMAL_3,
		SIO_ANIM_BTL_ATTACK_NORMAL_4,
		SIO_ANIM_BTL_ATTACK_NORMAL_AIR_0,
		SIO_ANIM_BTL_ATTACK_NORMAL_AIR_1,
		SIO_ANIM_BTL_ATTACK_NORMAL_AIR_2,
		SIO_ANIM_BTL_ATTACK_NORMAL_AIR_3,
		SIO_ANIM_BTL_ATTACK_NORMAL_AIR_4,
		SIO_ANIM_BTL_ATTACK_PARALYZE_SMOKE,
		SIO_ANIM_BTL_ATTACK_POISON_BUBBLE,
		SIO_ANIM_BTL_ATTACK_PRE_SMASH_AIR_LOOP,
		SIO_ANIM_BTL_ATTACK_PRE_SMASH_AIR_START,
		SIO_ANIM_BTL_ATTACK_PRE_SMASH_LOOP,
		SIO_ANIM_BTL_ATTACK_PRE_SMASH_START,
		SIO_ANIM_BTL_ATTACK_RAGE_LASER,
		SIO_ANIM_BTL_ATTACK_RAILGUN,
		SIO_ANIM_BTL_ATTACK_RAIN_BARRETT_END,
		SIO_ANIM_BTL_ATTACK_RAIN_BARRETT_LOOP,
		SIO_ANIM_BTL_ATTACK_RAIN_BARRETT_START,
		SIO_ANIM_BTL_ATTACK_RELOAD,
		SIO_ANIM_BTL_ATTACK_RISING_STAR,
		SIO_ANIM_BTL_ATTACK_SPIDER_WEB,
		SIO_ANIM_BTL_ATTACK_STRIKE,
		SIO_ANIM_BTL_ATTACK_STRIKE_AIR,
		SIO_ANIM_BTL_ATTACK_STRIKE_AIR_SUB,
		SIO_ANIM_BTL_ATTACK_STRIKE_START,
		SIO_ANIM_BTL_ATTACK_STRIKE_SUB,
		SIO_ANIM_BTL_ATTACK_THUNDER_BOLT,
		SIO_ANIM_BTL_ATTACK_TRIPLE_STAR,
		SIO_ANIM_BTL_ATTACK_TWIN_FLOW,
		SIO_ANIM_BTL_ATTACK_VOLTEC_RAIN,
		SIO_ANIM_BTL_ATTACK_WIDE_SHOT,
		SIO_ANIM_BTL_BLOW_DOWN_B,
		SIO_ANIM_BTL_BLOW_DOWN_F,
		SIO_ANIM_BTL_BLOW_MIGHTY,
		SIO_ANIM_BTL_BLOW_UP_B,
		SIO_ANIM_BTL_BLOW_UP_F,
		SIO_ANIM_BTL_DAMAGE_AIR_LARGE_B,
		SIO_ANIM_BTL_DAMAGE_AIR_LARGE_F,
		SIO_ANIM_BTL_DAMAGE_AIR_LARGE_L,
		SIO_ANIM_BTL_DAMAGE_AIR_LARGE_R,
		SIO_ANIM_BTL_DAMAGE_AIR_LOOP,
		SIO_ANIM_BTL_DAMAGE_AIR_SMALL_B,
		SIO_ANIM_BTL_DAMAGE_AIR_SMALL_F,
		SIO_ANIM_BTL_DAMAGE_AIR_SMALL_L,
		SIO_ANIM_BTL_DAMAGE_AIR_SMALL_R,
		SIO_ANIM_BTL_DAMAGE_LARGE_B,
		SIO_ANIM_BTL_DAMAGE_LARGE_F,
		SIO_ANIM_BTL_DAMAGE_LARGE_L,
		SIO_ANIM_BTL_DAMAGE_LARGE_R,
		SIO_ANIM_BTL_DAMAGE_LOOP,
		SIO_ANIM_BTL_DAMAGE_SMALL_B,
		SIO_ANIM_BTL_DAMAGE_SMALL_F,
		SIO_ANIM_BTL_DAMAGE_SMALL_L,
		SIO_ANIM_BTL_DAMAGE_SMALL_R,
		SIO_ANIM_BTL_DEAD,
		SIO_ANIM_BTL_DOWN_B,
		SIO_ANIM_BTL_DOWN_F,
		SIO_ANIM_BTL_DOWN_UNIQUE,
		SIO_ANIM_BTL_FALL,
		SIO_ANIM_BTL_GUARD_HIT,
		SIO_ANIM_BTL_GUARD_LOOP,
		SIO_ANIM_BTL_GUARD_START,
		SIO_ANIM_BTL_GUARD_WALK_B,
		SIO_ANIM_BTL_GUARD_WALK_F,
		SIO_ANIM_BTL_GUARD_WALK_L,
		SIO_ANIM_BTL_GUARD_WALK_R,
		SIO_ANIM_BTL_ITEM,
		SIO_ANIM_BTL_JUMP,
		SIO_ANIM_BTL_LAND,
		SIO_ANIM_BTL_MAGIC_EMIT,
		SIO_ANIM_BTL_MAGIC_END,
		SIO_ANIM_BTL_MAGIC_LOOP,
		SIO_ANIM_BTL_MAGIC_START,
		SIO_ANIM_BTL_MAGIC_WALK_B,
		SIO_ANIM_BTL_MAGIC_WALK_F,
		SIO_ANIM_BTL_MAGIC_WALK_L,
		SIO_ANIM_BTL_MAGIC_WALK_R,
		SIO_ANIM_BTL_MOVE_BRAKE,
		SIO_ANIM_BTL_MOVE_IDLE,
		SIO_ANIM_BTL_MOVE_RUN,
		SIO_ANIM_BTL_MOVE_WALK_B,
		SIO_ANIM_BTL_MOVE_WALK_F,
		SIO_ANIM_BTL_MOVE_WALK_L,
		SIO_ANIM_BTL_MOVE_WALK_R,
		SIO_ANIM_BTL_MYSTIC_FEROX_SOL,
		SIO_ANIM_BTL_MYSTIC_FULL_FIRING,
		SIO_ANIM_BTL_REACT,
		SIO_ANIM_BTL_SMASH_EXTEND_GATE_Landing,
		SIO_ANIM_BTL_STEP_AIR,
		SIO_ANIM_BTL_STEP_LAND,
		SIO_ANIM_BTL_STEP_LAND_BACK,
		SIO_ANIM_SYS_ADD_DASH_WEIGHT_LEFT,
		SIO_ANIM_SYS_ADD_DASH_WEIGHT_RIGHT,
		SIO_ANIM_SYS_ADD_RUN_WEIGHT_LEFT,
		SIO_ANIM_SYS_ADD_RUN_WEIGHT_RIGHT,
		SIO_ANIM_SYS_ADD_WALK_WEIGHT_LEFT,
		SIO_ANIM_SYS_ADD_WALK_WEIGHT_RIGHT,
		SIO_ANIM_SYS_BRAKE_WALL,
		SIO_ANIM_SYS_DASH,
		SIO_ANIM_SYS_DASH_BRAKE_000,
		SIO_ANIM_SYS_DASH_BRAKE_001,
		SIO_ANIM_SYS_DASH_UTURN_LEFT,
		SIO_ANIM_SYS_DASH_WARPING_LEFT,
		SIO_ANIM_SYS_DASH_WARPING_RIGHT,
		SIO_ANIM_SYS_DIVE_AIR,
		SIO_ANIM_SYS_DOOR_OPEN_HAND_BOTH,
		SIO_ANIM_SYS_DOOR_OPEN_HAND_RIGHT,
		SIO_ANIM_SYS_IDLE,
		SIO_ANIM_SYS_IDLE_CHARA,
		SIO_ANIM_SYS_IDLE_FREE_000,
		SIO_ANIM_SYS_IDLE_FREE_001,
		SIO_ANIM_SYS_IDLE_FREE_002,
		SIO_ANIM_SYS_IDLE_FREE_003,
		SIO_ANIM_SYS_IDLE_FREE_004,
		SIO_ANIM_SYS_IDLE_FREE_BATTLE,
		SIO_ANIM_SYS_IDLE_FREE_COLD,
		SIO_ANIM_SYS_IDLE_FREE_FAV,
		SIO_ANIM_SYS_IDLE_FREE_FLA_000,
		SIO_ANIM_SYS_IDLE_FREE_FLA_001,
		SIO_ANIM_SYS_IDLE_FREE_HIGH_PLACE,
		SIO_ANIM_SYS_IDLE_FREE_HOT,
		SIO_ANIM_SYS_IDLE_TRANS_IDLE,
		SIO_ANIM_SYS_IDLE_TRANS_IDLE_CHARA,
		SIO_ANIM_SYS_IDLE_TRANS_WALK,
		SIO_ANIM_SYS_JUMP_LANDING,
		SIO_ANIM_SYS_JUMP_LANDING_DAMAGE,
		SIO_ANIM_SYS_JUMP_LANDING_HIGH,
		SIO_ANIM_SYS_JUMP_LOOP,
		SIO_ANIM_SYS_JUMP_RUN_END,
		SIO_ANIM_SYS_JUMP_RUN_LANDING,
		SIO_ANIM_SYS_JUMP_RUN_LANDING_SMART,
		SIO_ANIM_SYS_JUMP_RUN_LOOP,
		SIO_ANIM_SYS_JUMP_RUN_START,
		SIO_ANIM_SYS_JUMP_START,
		SIO_ANIM_SYS_LADDER_DOWN_END,
		SIO_ANIM_SYS_LADDER_DOWN_LOOP,
		SIO_ANIM_SYS_LADDER_DOWN_START,
		SIO_ANIM_SYS_LADDER_DOWN_TRANS_LADDER_IDLE,
		SIO_ANIM_SYS_LADDER_IDLE,
		SIO_ANIM_SYS_LADDER_IDLE_TRANS_LADDER_DOWN,
		SIO_ANIM_SYS_LADDER_IDLE_TRANS_LADDER_UP,
		SIO_ANIM_SYS_LADDER_TRANS_JUMP_RUN_LOOP,
		SIO_ANIM_SYS_LADDER_UP_EARLY,
		SIO_ANIM_SYS_LADDER_UP_EARLY_TRANS_LADDER_IDLE,
		SIO_ANIM_SYS_LADDER_UP_END,
		SIO_ANIM_SYS_LADDER_UP_LOOP,
		SIO_ANIM_SYS_LADDER_UP_START,
		SIO_ANIM_SYS_LADDER_UP_TRANS_LADDER_IDLE,
		SIO_ANIM_SYS_LOSE_TRANS_IDLE,
		SIO_ANIM_SYS_MAP_GIMMICK_01,
		SIO_ANIM_SYS_RUN,
		SIO_ANIM_SYS_RUN_BRAKE_000,
		SIO_ANIM_SYS_RUN_BRAKE_001,
		SIO_ANIM_SYS_RUN_UTURN_AROUND_LEFT,
		SIO_ANIM_SYS_RUN_UTURN_LEFT,
		SIO_ANIM_SYS_RUN_WARPING_LEFT,
		SIO_ANIM_SYS_RUN_WARPING_RIGHT,
		SIO_ANIM_SYS_SWIM_DIVE,
		SIO_ANIM_SYS_SWIM_EARLY,
		SIO_ANIM_SYS_SWIM_FLOAT,
		SIO_ANIM_SYS_SWIM_IDLE,
		SIO_ANIM_SYS_SWIM_IDLE_TRANS_SWIM_SLOW,
		SIO_ANIM_SYS_SWIM_SLOW,
		SIO_ANIM_SYS_SWIM_SLOW_TRANS_SWIM_IDLE,
		SIO_ANIM_SYS_SWIM_SLOW_TRANS_WALK,
		SIO_ANIM_SYS_TOUCH_SQUAT,
		SIO_ANIM_SYS_TOUCH_STAND,
		SIO_ANIM_SYS_TREASURE_OPEN,
		SIO_ANIM_SYS_WALK,
		SIO_ANIM_SYS_WALK_TRANS_IDLE_000,
		SIO_ANIM_SYS_WALK_TRANS_IDLE_001,
		SIO_ANIM_SYS_WALK_TRANS_SWIM_SLOW,
		SIO_ANIM_SYS_WALK_UTURN_LEFT,

		SIO_ANIM_END
	};
	enum SIO_SKILL
	{

		//지상
		SKILL_LUNAR_BLAST, SKILL_GRAVITAS_FIELD, SKILL_ANNIHILATION,
		//공중
		SKILL_DISPLODE, SKILL_AQEOUS_IMPACT, SKILL_SPEAR_SWEEP, SKILL_END



	};


	enum SIO_SKILL_GROUND   //지상 스킬 
	{
		SKILL_GROUND_LUNAR_BLAST, SKILL_GROUND_GRAVITAS_FIELD, SKILL_GROUND_ANNIHILATION, SKILL_GROUND_END
	};
	enum SIO_SKILL_AIR    //공중 스킬 
	{
		SKILL_AIR_DISPLODE = SIO_SKILL_GROUND::SKILL_GROUND_END, SKILL_AIR_AQEOUS_IMPACT, SKILL_AIR_SPEAR_SWEEP, SKILL_AIR_END
	};

	enum SIO_FLAMING_EDGE
	{
		SKILL_FLAMING_EDGE_INFERNO_TORRENT, SKILL_FLAMING_EDGE_RENDING_FLASH,
		SKILL_FLAMING_EDGE_EXPLOSIVE_RING, SKILL_FLAMING_EDGE_INCINERATION_WAVE,
		SKILL_FLAMING_EDGE_RISING_PHOENIX, SKILL_FLAMING_EDGE_SEARING_GALE,
		SKILL_FLAMING_EDGE_END
	};

	enum SIO_AI
	{
		SIO_AI_REVIVE, SIO_AI_CHASE, SIO_AI_EVADE, SIO_AI_MOVE, SIO_AI_HEAL, SIO_AI_GROUNDBATTLE, SIO_AI_AIRBATTLE, SIO_AI_FALL, SIO_AI_END
	};


private:
	explicit CShionne(ID3D11Device* pDeviceOut, ID3D11DeviceContext* pDeviceContextOut);
	explicit CShionne(const CShionne& rhs);
	virtual ~CShionne() = default;

public:
	virtual HRESULT NativeConstruct_Prototype() override;
	virtual HRESULT NativeConstruct(void* pArg);
	virtual void Tick(_double TimeDelta) override;
	virtual void LateTick(_double TimeDelta) override;
	virtual HRESULT Render() override;


private:
	HRESULT SetUp_Components();
	HRESULT SetUp_ConstantTable();


public:

	void Key_Input();
	void Key_Input_Town();
	void Jump(_double TimeDelta);
	void Evade();
	void Attack();
	void Skill(_double TimeDelta);
	void AI(_double TimeDelta);
	void Pattern_Choice();

	void Compute_Anim(_double TimeDelta);
	void Compute_Move(_double TimeDelta);
	void Compute_Look();
	void Compute_Hit(_double TimeDelta);
	void Compute_Attack(); //콜라이더 온오프,데미지,공격종류등




public:

	//지상스킬
	void Lunar_Blast();
	void Gravitas_Field();
	void Annihilation();


	//공중스킬
	void Displode();
	void Aqeous_Impact();
	void Spear_Sweep();

	void Dragon_Swarm();




	//AI

	void AirBattle(_double TimeDelta);
	void GroundBattle(_double TimeDelta);
	void Move(_double TimeDelta);
	void Chase(_double TimeDelta);
	void Evade(_double TimeDelta);
	void Heal(_double TimeDelta);

	void Falling(_double TimeDelta);


	void Revive();


public:
	static CShionne* Create(ID3D11Device* pDeviceOut, ID3D11DeviceContext* pDeviceContextOut);
	virtual CGameObject* Clone(void* pArg) override;
	virtual void Free() override;

private:

	_bool  m_FlamingEdge = false; //플람엣지 사용 가능한지
	_uint m_NumAnim = 0;   // 애니메이션 총 갯수 저장하기 위한 변수

	SIO_SKILL m_eSkillUse = SKILL_END; //지금 사용하는 스킬
	SIO_SKILL_AIR m_eSkillAirFirst = SKILL_AIR_END;
	SIO_SKILL_AIR m_eSkillAirSecond = SKILL_AIR_END;
	SIO_SKILL_AIR m_eSkillAirThird = SKILL_AIR_END;
	SIO_SKILL_GROUND m_eSkillGroundFirst = SKILL_GROUND_END;
	SIO_SKILL_GROUND m_eSkillGroundSecond = SKILL_GROUND_END;
	SIO_SKILL_GROUND m_eSkillGroundThird = SKILL_GROUND_END;


	SIO_AI  m_ePattern = SIO_AI_END;


	class CGun* m_pNormalGun = nullptr;
	const char* m_HandBone = "RHand_Attach";
	_bool m_bTorrent = false;
	_bool m_bPhoenix = false;
	_bool m_bGale = false;
	_bool m_bRing = false;





	//총알 관련
	_bool m_bMakeNormalBullet = false;
	_bool m_bMakeSecondNormalBullet = false;
};

END